buildscript {
	ext {
		springBootVersion = '1.3.2.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.6'
		// TODO: remove this, it's automatically applied by spring-boot-gradle
		classpath 'io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE'
	}
}

plugins {
	id 'pl.allegro.tech.build.axion-release' version '1.3.4'
	id 'com.jfrog.bintray' version '1.5'
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: "jacoco"
apply plugin: "maven-publish"

ext {
	userHome = System.properties['user.home']
	dockerUser = project.hasProperty('dockerUser') ? project.property('dockerUser') : System.getenv('DOCKER_USER')
	dockerEMail = project.hasProperty('dockerEMail') ? project.property('dockerEMail') : System.getenv('DOCKER_EMAIL')
	dockerPassword = project.hasProperty('dockerPassword') ? project.property('dockerPassword') : System.getenv('DOCKER_PASSWORD')
	dockerHost = project.hasProperty('dockerHost') ? project.property('dockerHost') : null
	dockerCertPath = project.hasProperty('dockerCertPath') ? file(project.property('dockerCertPath')) : null
}

scmVersion {
	tag {
		prefix = 'version'
	}
	repository {
		customUsername = 'ehirsch'
		customPassword = project.hasProperty('gitHubReleaseToken') ? project.property('gitHubReleaseToken') :
				System.getenv('GITHUB_RELEASE_TOKEN')
	}
	hooks {
		pre 'fileUpdate', [file: 'readme.adoc', pattern: {v, c -> /rest-$v/}, replacement: {v, c -> "rest-$v"}]
		pre 'fileUpdate', [file: 'src/main/resources/banner.txt', pattern: {v, c -> /version: $v/}, replacement: {v, c -> "version: $v"}]
		pre 'commit'
	}
}
version = scmVersion.version

//noinspection GroovyUnusedAssignment
targetCompatibility = 1.7
//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.7

repositories {
	jcenter()
}


dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-hateoas'
	compile 'org.springframework.boot:spring-boot-devtools'
	compile 'org.codehaus.groovy:groovy:2.4.+'
	compile 'org.codehaus.groovy:groovy-json:2.4.+'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.codehaus.groovy:groovy-test'
	testCompile 'com.jayway.jsonpath:json-path:2.1.0'
}

// make check depend on coverage
jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}
check.dependsOn 'jacocoTestReport'


springBoot {
	// we want the jar file to run as a unix service.
	// s. https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html#deployment-service
	// for more information
	executable = true
}

// creates a sources jar. This is needed if we want to be published on jcenter.
task sourceJar(type: Jar) {
	from sourceSets.main.groovy
	classifier "sources"
}

publishing {
	publications {
		api(MavenPublication) {
			from components.java
			groupId 'net.eikehirsch.clewarecontrol'
			artifactId 'clewarecontrol-rest'
			version project.version

			artifact sourceJar
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayAPIKey') ? project.property('bintrayAPIKey') : System.getenv('BINTRAY_API_KEY')

	publications = ['api']
	publish = true

	pkg {
		repo = 'maven'
		name = project.name
		licenses = ['MIT']
		vcsUrl = 'https://github.com/ehirsch/clewarecontrol-rest.git'

		//noinspection GroovyAssignabilityCheck
		version {
			name = project.version
			description = "A RESTful API for the clewarecontrol binary"
			vcsTag = project.version
		}
	}
}

// only publish release versions
// and publish the spring-boot executable jar.
bintrayUpload {
	onlyIf { !version.toString().contains("SNAPSHOT") }
	dependsOn assemble
}


apply plugin: 'com.bmuschko.docker-remote-api'

docker {
	// docker-machine will create those env entries for us - so we will use them as default and only fallback to project properties if needed.
	url = System.getenv('DOCKER_HOST') ? System.getenv('DOCKER_HOST').replace('tcp', 'https') : dockerHost
	certPath = System.getenv('DOCKER_CERT_PATH') ? file(System.getenv('DOCKER_CERT_PATH')) : dockerCertPath

	registryCredentials {
		username = dockerUser
		password = dockerPassword
		email = dockerEMail
	}
}



import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task dockerCopyArchive( type: Copy, dependsOn: build) {
	from jar.archivePath
	into "${buildDir}/docker"
}

task dockerCreateDockerfile(type: Dockerfile, dependsOn: dockerCopyArchive) {
	instruction "FROM smartsteuer/clewarecontrol-jre"
	instruction "MAINTAINER Eike Hirsch \"me@eike-hirsch.net\""
	instruction "VOLUME /tmp"
	instruction "ADD ${jar.archiveName} /app.jar"
	instruction "RUN bash -c 'touch /app.jar'"
	instruction 'ENTRYPOINT ["java","-Djava.security.egd=file:/dev/urandom","-jar","/app.jar"]'
}

task dockerImage(type: DockerBuildImage, dependsOn: dockerCreateDockerfile) {
	inputDir = dockerCreateDockerfile.destFile.parentFile
	tag = "${dockerUser}/${jar.baseName}:${project.version}"
}

task dockerPush(type: DockerPushImage, dependsOn: dockerImage) {
	imageName = "${dockerUser}/${jar.baseName}"
	tag = project.version
}


task wrapper(type: Wrapper) {
	gradleVersion = '2.11'
}
