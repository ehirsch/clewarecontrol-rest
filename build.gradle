buildscript {
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
	  jcenter()
    }
    dependencies {
      classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	  classpath 'io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE'
    }
}

plugins {
	id 'net.saliman.cobertura' version '2.3.0'
}

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

jar {
    baseName = 'clewarecontrol-rest'
    version = '0.0.1-SNAPSHOT'
}
//noinspection GroovyUnusedAssignment
targetCompatibility = 1.7
//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.7

repositories {
    jcenter()
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-hateoas'
	compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.codehaus.groovy:groovy:2.4.+'
    compile 'org.codehaus.groovy:groovy-json:2.4.+'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.codehaus.groovy:groovy-test'
	testCompile 'com.jayway.jsonpath:json-path:2.1.0'
}

// for shippable we want to redirect some outputs
if( hasProperty("testResultsDir")) {
	test.reports.junitXml.destination = testResultsDir
}

// set up code coverage reporting for shippable
if( hasProperty("coverageReportDir")) {
	cobertura.coverageReportDir = file(new File("${coverageReportDir}"))
}

cobertura {
	coverageFormats = ['xml', 'html']
}

// make check depend on coverage
//noinspection GroovyAssignabilityCheck
check.dependsOn 'cobertura'


task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
